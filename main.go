package main

import (
	"fmt"
	"log"
	"maps"
	"os"
	"slices"

	"hidehic0/acc_utils/internal/cmd"
	"hidehic0/acc_utils/internal/ui/submit_select"
	"hidehic0/acc_utils/internal/utils"

	"github.com/spf13/cobra"

	tea "github.com/charmbracelet/bubbletea"
)

var geturlCmd = &cobra.Command{
	Use:   "geturl",
	Short: "get Urls",
	Long:  "get Urls",
	RunE: func(cmd *cobra.Command, args []string) error {
		tasks := utils.GetTaskInfomation()
		for _, key := range slices.Sorted(maps.Keys(tasks)) {
			task := tasks[key]
			fmt.Printf("ID: %s URL: %s\n", task.Id, task.Url)
		}
		return nil
	},
}

var submitCmd = &cobra.Command{
	Use:   "submit",
	Short: "Submit code",
	Long:  "Submit code",
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		task := args[0]

		if !slices.Contains(utils.GetTasks(), task) {
			fmt.Printf("task %s not found\n", task)
			return nil
		}

		cmdFn.SubmitFn(task)

		return nil
	},
}

var submitRCmd = &cobra.Command{
	Use:   "submit_s",
	Short: "Select a directory and submit",
	Long:  "Select a directory and submit",
	RunE: func(cmd *cobra.Command, args []string) error {
		p := tea.NewProgram(submit_select_ui.InitalModel())

		if _, err := p.Run(); err != nil {
			return err
		}

		return nil
	},
}

var randomCaseCmd = &cobra.Command{
	Use:   "random_case",
	Short: "Generate random case",
	Long:  "Generate random case",
	Args:  cobra.ExactArgs(2),
	RunE: func(cmd *cobra.Command, args []string) error {
		generateCmd := args[0]
		solveCmd := args[1]
		n, _ := cmd.Flags().GetInt("n")
		dir, _ := cmd.Flags().GetString("dir")

		cmdFn.RandomCaseFn(generateCmd, solveCmd, n, dir)

		return nil
	},
}

var OEISCmd = &cobra.Command{
	Use:   "oeis",
	Short: "Search OEIS",
	Long:  "Search OEIS",
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		start, err := cmd.Flags().GetInt("start")

		if err != nil {
			log.Fatal(err)
			os.Exit(256)
		}

		end, err := cmd.Flags().GetInt("end")

		if err != nil {
			log.Fatal(err)
			os.Exit(256)
		}

		cmdFn.OeisCmdFn(args[0], start, end)

		return nil
	},
}

var rootCmd = &cobra.Command{
	Use:   "acc_utils",
	Short: "A tool that uses files generated by atcoder-cli to open and interact with problems",
	Long:  "A tool that uses files generated by atcoder-cli to open and interact with problems",
	RunE: func(cmd *cobra.Command, args []string) error {
		if len(args) == 0 {
			return cmd.Help()
		}
		return nil
	},
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}

func init() {
	rootCmd.AddCommand(geturlCmd)
	rootCmd.AddCommand(submitCmd)
	rootCmd.AddCommand(OEISCmd)
	rootCmd.AddCommand(randomCaseCmd)
	rootCmd.AddCommand(submitRCmd)
	OEISCmd.Flags().IntP("start", "s", 1, "start number")
	OEISCmd.Flags().IntP("end", "e", 6, "end number")
	randomCaseCmd.Flags().IntP("n", "n", 10, "number of case")
	randomCaseCmd.Flags().StringP("dir", "d", "tests", "test directory")
}
